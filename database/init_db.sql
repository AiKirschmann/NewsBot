async def cmd_stats(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    try:
        if str(message.from_user.id) == config.ADMIN_ID:
            uptime = datetime.now() - start_time
            days = uptime.days
            hours, remainder = divmod(uptime.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)

            stats = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
            stats += f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {days}–¥ {hours}—á {minutes}–º {seconds}—Å\n"
            stats += f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {'–†–∞–±–æ—Ç–∞–µ—Ç' if scheduler and scheduler.is_running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            
            try:
                with get_db_session() as conn:
                    with conn.cursor() as cur:
                        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
                        cur.execute("SELECT COUNT(*) FROM news")
                        total_news = cur.fetchone()
                        total_news = total_news[0] if total_news else 0
                        
                        # –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
                        cur.execute("SELECT COUNT(*) FROM news WHERE is_published = true")
                        published_news = cur.fetchone()
                        published_news = published_news[0] if published_news else 0
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                        cur.execute("""
                            SELECT COALESCE(category, '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') as cat, COUNT(*) 
                            FROM news 
                            GROUP BY cat
                            ORDER BY COUNT(*) DESC
                        """)
                        categories = cur.fetchall()
                        
                        # –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
                        cur.execute("""
                            SELECT scheduled_time, n.title 
                            FROM publications p 
                            JOIN news n ON p.news_id = n.id 
                            WHERE p.status = 'pending' 
                            AND p.scheduled_time > CURRENT_TIMESTAMP 
                            ORDER BY scheduled_time 
                            LIMIT 1
                        """)
                        next_pub = cur.fetchone()

                stats += f"\nüì∞ –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}\n"
                stats += f"üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_news}\n"
                
                if categories:
                    stats += "\nüìã –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
                    for cat, count in categories:
                        stats += f"‚Ä¢ {cat}: {count}\n"
                
                if next_pub:
                    stats += f"\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è:\n"
                    stats += f"–í—Ä–µ–º—è: {next_pub[0].strftime('%Y-%m-%d %H:%M')}\n"
                    stats += f"–ù–æ–≤–æ—Å—Ç—å: {next_pub[1][:50]}..."
                else:
                    stats += f"\nüìÖ –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {config.PUBLISH_TIMES[0]}"
                
            except Exception as db_error:
                logger.error(f"Database error in stats: {db_error}")
                stats += "\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"
            
            await message.reply(stats)
    except Exception as e:
        logger.error(f"Error in stats command: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
