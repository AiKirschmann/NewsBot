from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
import asyncio
from utils.logger import setup_logger
from utils.config import config
from database.connection import get_db_session
from services.publisher import NewsPublisher
from datetime import datetime

logger = setup_logger(__name__)

class AdminBot:
    _instance = None

    def __new__(cls, *args, **kwargs):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self, token: str = None, admin_ids: list = None):
        if not hasattr(self, '_initialized'):
            self.token = token or config.TELEGRAM_TOKEN
            self.admin_ids = admin_ids or [int(config.ADMIN_ID)]
            self.bot = None
            self.dp = None
            self.publisher = None
            self.is_running = False
            self.start_time = datetime.now()
            self._initialized = True

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
        try:
            if not self.bot:
                default = DefaultBotProperties(parse_mode="HTML")
                self.bot = Bot(token=self.token, default=default)
                await self.bot.delete_webhook(drop_pending_updates=True)
            
            if not self.dp:
                self.dp = Dispatcher()
                self.register_handlers()
            
            if not self.publisher:
                self.publisher = NewsPublisher(self.bot)
            
            logger.info("Bot initialized successfully")
            return True
        except Exception as e:
            logger.error(f"Failed to initialize bot: {e}")
            return False

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        try:
            self.dp.message.register(self.cmd_start, Command("start"))
            self.dp.message.register(self.cmd_help, Command("help"))
            self.dp.message.register(self.cmd_stats, Command("stats"))
            self.dp.message.register(self.cmd_status, Command("status"))
            self.dp.message.register(self.cmd_next_post, Command("next"))
            self.dp.message.register(self.cmd_schedule, Command("schedule"))
            logger.info("Handlers registered successfully")
        except Exception as e:
            logger.error(f"Error registering handlers: {e}")
            raise

    async def cmd_help(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            if not self.is_admin(message.from_user.id):
                return

            help_text = """
üìö –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:
/stats - –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/schedule - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
/next - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Å—Ç–µ

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏:
/skip - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç
/force - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç
/pause - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
/resume - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
"""
            await message.reply(help_text)
        except Exception as e:
            logger.error(f"Error in help command: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–º–æ—â–∏.")

    async def cmd_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            if not self.is_admin(message.from_user.id):
                await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return

            await message.reply(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
                "/next - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç\n"
                "/schedule - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"
            )
        except Exception as e:
            logger.error(f"Error in start command: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

    async def cmd_stats(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        try:
            if not self.is_admin(message.from_user.id):
                return

            stats = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
            stats += f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {self.get_uptime()}\n"
            stats += f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–†–∞–±–æ—Ç–∞–µ—Ç' if self.is_running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
            
            await message.reply(stats)
        except Exception as e:
            logger.error(f"Error in stats command: {e}")
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def cmd_status(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            if not self.is_admin(message.from_user.id):
                return

            status = "ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
            status += f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: {self.is_running}\n"
            status += f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {self.get_uptime()}"
            
            await message.reply(status)
        except Exception as e:
            logger.error(f"Error in status command: {e}")
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")

    async def cmd_next_post(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /next"""
        try:
            if not self.is_admin(message.from_user.id):
                return

            next_post = await self.publisher.get_next_post()
            if next_post:
                response = "üìù –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç:\n\n"
                response += f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {next_post['title']}\n"
                response += f"–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {next_post['scheduled_time']}"
            else:
                response = "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"
            
            await message.reply(response)
        except Exception as e:
            logger.error(f"Error in next_post command: {e}")
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Å—Ç–µ")

    async def cmd_schedule(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule"""
        try:
            if not self.is_admin(message.from_user.id):
                return

            schedule = await self.publisher.get_schedule()
            if schedule:
                response = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:\n\n"
                for post in schedule:
                    response += f"‚Ä¢ {post['scheduled_time']}: {post['title']}\n"
            else:
                response = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ"
            
            await message.reply(response)
        except Exception as e:
            logger.error(f"Error in schedule command: {e}")
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not await self.initialize():
            return

        self.is_running = True
        try:
            logger.info("Starting bot polling")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"Error during bot polling: {e}")
            self.is_running = False
            await self.stop()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            self.is_running = False
            if self.bot:
                await self.bot.session.close()
            logger.info("Bot stopped")
        except Exception as e:
            logger.error(f"Error during bot shutdown: {e}")

    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id in self.admin_ids

    def get_uptime(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        uptime = datetime.now() - self.start_time
        days = uptime.days
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{days}–¥ {hours}—á {minutes}–º {seconds}—Å"

async def create_admin_bot(token: str, admin_ids: list[int]) -> AdminBot:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    bot = AdminBot(token=token, admin_ids=admin_ids)
    await bot.initialize()
    return bot
