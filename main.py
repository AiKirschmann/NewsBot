import asyncio
import sys
import signal
from utils.logger import setup_logger
from utils.config import config
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from services.scheduler import NewsScheduler
from aiogram.filters import Command
import logging
from datetime import datetime
from database.connection import get_db_session  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger(__name__)
logging.basicConfig(level=logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = None
dp = None
scheduler = None
start_time = None

async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        if str(message.from_user.id) == config.ADMIN_ID:
            await message.reply(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
                "/next - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç\n"
                "/schedule - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"
            )
        else:
            await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    except Exception as e:
        logger.error(f"Error in start command: {e}")

async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        if str(message.from_user.id) == config.ADMIN_ID:
            help_text = """
üìö –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:
/stats - –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/schedule - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
/next - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Å—Ç–µ

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏:
/skip - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç
/force - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç
/pause - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
/resume - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
"""
            await message.reply(help_text)
    except Exception as e:
        logger.error(f"Error in help command: {e}")

async def cmd_status(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    try:
        if str(message.from_user.id) == config.ADMIN_ID:
            uptime = datetime.now() - start_time
            days = uptime.days
            hours, remainder = divmod(uptime.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)

            status = "ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
            status += f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\n"
            status += f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {days}–¥ {hours}—á {minutes}–º {seconds}—Å\n"
            status += f"üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'–†–∞–±–æ—Ç–∞–µ—Ç' if scheduler and scheduler.is_running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
            
            await message.reply(status)
    except Exception as e:
        logger.error(f"Error in status command: {e}")

async def cmd_stats(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    try:
        if str(message.from_user.id) == config.ADMIN_ID:
            uptime = datetime.now() - start_time
            days = uptime.days
            hours, remainder = divmod(uptime.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)

            stats = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
            stats += f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {days}–¥ {hours}—á {minutes}–º {seconds}—Å\n"
            stats += f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {'–†–∞–±–æ—Ç–∞–µ—Ç' if scheduler and scheduler.is_running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            
            try:
                with get_db_session() as conn:
                    with conn.cursor() as cur:
                        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
                        cur.execute("SELECT COUNT(*) FROM news")
                        total_news = cur.fetchone()
                        total_news = total_news[0] if total_news else 0
                        
                        # –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º published_at)
                        cur.execute("""
                            SELECT COUNT(*) FROM news 
                            WHERE published_at IS NOT NULL 
                            AND published_at <= CURRENT_TIMESTAMP
                        """)
                        published_news = cur.fetchone()
                        published_news = published_news[0] if published_news else 0
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                        cur.execute("""
                            SELECT 
                                COALESCE(category, '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') as cat, 
                                COUNT(*),
                                COUNT(*) FILTER (WHERE published_at IS NOT NULL) as published
                            FROM news 
                            GROUP BY cat 
                            ORDER BY COUNT(*) DESC
                        """)
                        categories = cur.fetchall()
                        
                        # –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
                        cur.execute("""
                            SELECT n.title, p.scheduled_time
                            FROM publications p
                            JOIN news n ON p.news_id = n.id
                            WHERE p.status = 'pending'
                            AND p.scheduled_time > CURRENT_TIMESTAMP
                            ORDER BY p.scheduled_time
                            LIMIT 1
                        """)
                        next_pub = cur.fetchone()

                stats += f"\nüì∞ –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}\n"
                stats += f"üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_news}\n"
                
                if categories:
                    stats += "\nüìã –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
                    for cat, total, pub in categories:
                        stats += f"‚Ä¢ {cat}: {total} (–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {pub})\n"
                
                if next_pub:
                    stats += f"\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è:\n"
                    stats += f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {next_pub[0][:50]}...\n"
                    stats += f"–í—Ä–µ–º—è: {next_pub[1].strftime('%H:%M %d.%m.%Y')}"
                else:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    now = datetime.now()
                    current_time = now.strftime('%H:%M')
                    next_time = None
                    
                    for pub_time in config.PUBLISH_TIMES:
                        if pub_time > current_time:
                            next_time = pub_time
                            break
                    
                    if not next_time:
                        next_time = config.PUBLISH_TIMES[0]
                    
                    stats += f"\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {next_time}"
            
            except Exception as db_error:
                logger.error(f"Database error in stats: {db_error}")
                stats += "\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"
            
            await message.reply(stats)
            
    except Exception as e:
        logger.error(f"Error in stats command: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def cmd_schedule(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    try:
        if str(message.from_user.id) != config.ADMIN_ID:
            return

        with get_db_session() as conn:
            with conn.cursor() as cur:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                cur.execute("""
                    SELECT 
                        DATE(p.scheduled_time) as pub_date,
                        TO_CHAR(p.scheduled_time, 'HH24:MI') as pub_time,
                        COUNT(*) as posts_count,
                        string_agg(
                            CASE 
                                WHEN length(n.title) > 30 
                                THEN substring(n.title, 1, 30) || '...' 
                                ELSE n.title 
                            END, 
                            '\n'
                        ) as titles
                    FROM publications p
                    JOIN news n ON p.news_id = n.id
                    WHERE p.status = 'pending'
                    AND p.scheduled_time > CURRENT_TIMESTAMP
                    GROUP BY pub_date, pub_time
                    ORDER BY pub_date, pub_time
                """)
                schedule = cur.fetchall()

        response = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:\n\n"

        if schedule:
            current_date = None
            for pub_date, pub_time, count, titles in schedule:
                if current_date != pub_date:
                    current_date = pub_date
                    response += f"\nüìÜ {pub_date.strftime('%d.%m.%Y')}:\n"
                response += f"‚è∞ {pub_time} ({count} –ø—É–±–ª.):\n"
                response += f"{titles}\n"
            
            response += f"\n–í—Å–µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {sum(count for _, _, count, _ in schedule)}"
        else:
            response += "üïí –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
            for time in config.PUBLISH_TIMES:
                response += f"‚Ä¢ {time}\n"
            response += "\n–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π"
            response += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /plan –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"

        response += f"\n\n–ü–æ—Å—Ç–æ–≤ –∑–∞ —Ä–∞–∑: {config.POSTS_PER_TIME}"
        
        await message.reply(response)
    except Exception as e:
        logger.error(f"Error in schedule command: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

async def cmd_next(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    try:
        if str(message.from_user.id) != config.ADMIN_ID:
            return

        with get_db_session() as conn:
            with conn.cursor() as cur:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                cur.execute("""
                    WITH upcoming AS (
                        SELECT 
                            n.title,
                            n.category,
                            p.scheduled_time,
                            n.created_at,
                            LAG(p.scheduled_time) OVER (ORDER BY p.scheduled_time) as prev_time
                        FROM publications p
                        JOIN news n ON p.news_id = n.id
                        WHERE p.status = 'pending'
                        AND p.scheduled_time > CURRENT_TIMESTAMP
                        ORDER BY p.scheduled_time
                        LIMIT 4
                    )
                    SELECT *,
                           CASE 
                               WHEN prev_time IS NULL OR DATE(scheduled_time) != DATE(prev_time)
                               THEN true 
                               ELSE false 
                           END as show_date
                    FROM upcoming
                """)
                next_posts = cur.fetchall()

        if not next_posts:
            now = datetime.now()
            current_time = now.strftime('%H:%M')
            next_time = None
            
            for time in config.PUBLISH_TIMES:
                if time > current_time:
                    next_time = time
                    break
                    
            if not next_time:
                next_time = config.PUBLISH_TIMES[0]
                
            response = "üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
            response += f"\n–°–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {next_time}\n"
            response += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /plan –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π"
        else:
            response = "üì¨ –°–ª–µ–¥—É—é—â–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n"
            
            for title, category, scheduled_time, created_at, _, show_date in next_posts:
                if show_date:
                    response += f"\nüìÖ {scheduled_time.strftime('%d.%m.%Y')}:\n"
                    
                response += f"\n‚è∞ {scheduled_time.strftime('%H:%M')}\n"
                response += f"üì∞ {title}\n"
                response += f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                response += f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {created_at.strftime('%d.%m.%Y %H:%M')}\n"

            response += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /schedule –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"

        await message.reply(response)
    except Exception as e:
        logger.error(f"Error in next command: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö")

async def cmd_skip(message: types.Message):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é"""
    try:
        if str(message.from_user.id) != config.ADMIN_ID:
            return

        with get_db_session() as conn:
            with conn.cursor() as cur:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                cur.execute("""
                    UPDATE publications
                    SET status = 'skipped'
                    WHERE id = (
                        SELECT id FROM publications
                        WHERE status = 'pending'
                        AND scheduled_time > CURRENT_TIMESTAMP
                        ORDER BY scheduled_time
                        LIMIT 1
                    )
                    RETURNING (
                        SELECT title FROM news WHERE id = news_id
                    );
                """)
                result = cur.fetchone()
                conn.commit()

        if result:
            await message.reply(f"‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞:\n{result[0]}")
        else:
            await message.reply("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞")

    except Exception as e:
        logger.error(f"Error in skip command: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é")

async def cmd_plan(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    try:
        if str(message.from_user.id) != config.ADMIN_ID:
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        await scheduler._schedule_next_publications()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with get_db_session() as conn:
            with conn.cursor() as cur:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                cur.execute("""
                    SELECT 
                        DATE(scheduled_time) as pub_date,
                        COUNT(*) as posts_count
                    FROM publications 
                    WHERE status = 'pending'
                    AND scheduled_time > CURRENT_TIMESTAMP
                    GROUP BY pub_date
                    ORDER BY pub_date
                """)
                schedule = cur.fetchall()

        response = "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        
        if schedule:
            total_posts = sum(count for _, count in schedule)
            response += f"‚úÖ –í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {total_posts} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n\n"
            for pub_date, count in schedule:
                response += f"üìÖ {pub_date.strftime('%d.%m.%Y')}: {count} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
            response += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /next –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π"
        else:
            response += "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"

        await message.reply(response)
        
    except Exception as e:
        logger.error(f"Error in plan command: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π")

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ register_handlers
async def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_help, Command("help"))
    dp.message.register(cmd_status, Command("status"))
    dp.message.register(cmd_stats, Command("stats"))
    dp.message.register(cmd_schedule, Command("schedule"))
    dp.message.register(cmd_next, Command("next"))
    dp.message.register(cmd_skip, Command("skip"))
    dp.message.register(cmd_plan, Command("plan"))

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global bot, dp, scheduler, start_time
    
    try:
        start_time = datetime.now()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        default = DefaultBotProperties(parse_mode="HTML")
        bot = Bot(token=config.TELEGRAM_TOKEN, default=default)
        
        # –£–¥–∞–ª—è–µ–º webhook –∏ —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await bot.delete_webhook(drop_pending_updates=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        await register_handlers(dp)
        logger.info("Handlers registered successfully")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler = NewsScheduler()
        await scheduler.initialize()
        await scheduler.start()
        logger.info("Scheduler started successfully")
        
        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
        logger.info("Starting bot polling")
        await dp.start_polling(bot, allowed_updates=['message'])
        
    except Exception as e:
        logger.error(f"Critical error: {e}")
        raise
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if scheduler:
            await scheduler.stop()
        if bot:
            await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        sys.exit(1)
